#!/usr/bin/env python
import ConfigParser,sys,os,commands,grp,fileinput,subprocess,time
from pwd import getpwnam
from distutils import dir_util,file_util
from bzrlib.branch import Branch
from bzrlib.workingtree import WorkingTree
from bzrlib.tree import Tree

_openerp = grp.getgrnam('openerp')
os.setegid(_openerp.gr_gid)
os.seteuid(getpwnam('openerp')[2])

_root        = '/srv/openerp/instances'
_config_file = '%s/.bzr_revisions' % _root
_prod_path  = '%s/prod/src' % _root
_inte_path  = '%s/integration/src' % _root

_remote_srv = '<%=openerp_server_src%>'
_remote_add = '<%=openerp_addons_src%>'
_remote_ade = '<%=openerp_extras_src%>'
_remote_wcl = '<%=openerp_webcli_src%>'
_remote_sad = '/srv/bzr/specific-addons'

srv_rev = add_rev = ade_rev = web_rev = sad_rev = None
devnull = open('/dev/null','a')

def linkAddons(int_path,prod_path):
    print '''  Server: removing all addons and extra-addons'''
    subprocess.call(['find','%s/bin/addons'%int_path,'-type','l','-delete'])
    subprocess.call(['find','%s/bin/addons'%int_path,'-iname','"*.zip"','-delete'])

    print '''  Server: copying personnal addons from Production'''
    for file in os.listdir('%s/bin/addons'%prod_path):
      if file.endswith('.zip'):
        file_util.copy_file('%s/bin/addons/%s'%(prod_path,file), '%s/bin/addons/'%int_path)

    for src in ['addons','extra-addons','specific-addons']:
      print '''  Server: linking %s''' % src
      for file in os.listdir('%s/../%s/'%(int_path, src) ):
        if os.path.isdir( '%s/../%s/%s'%(int_path, src, file) ) and not os.path.exists( '%s/bin/addons/%s'%(int_path,file) ):
          os.symlink('../../../%s/%s'%(src, file), '%s/bin/addons/%s'%(int_path,file))



def createIntegration(revision,prod_path,int_path,remote_src):
  remote_srv = Branch.open(remote_src)
  print 'Entering %s'%os.path.basename(int_path)
  if os.path.exists(int_path):

    local_srv = WorkingTree.open(int_path)

    if revision:
      rev_id = revision

      if rev_id != local_srv.last_revision():
        print 'Getting %s for %s' %(revision, os.path.basename(int_path))
        print '''  Have to clean first.'''
        dir_util.remove_tree(int_path)
        print '''  Checkout to revno %s'''%revision
        remote_srv.create_checkout(int_path, revision_id=rev_id)

      else:
        print '''  Nothing to do, up do date!'''
    else:
      print '''  Getting latest sources for %s ''' % os.path.basename(int_path)
      local_srv.pull(remote_srv)
  else:
    if not os.path.exists(os.path.dirname(int_path)):
      print '''  Creating %s''' % os.path.dirname(int_path)
      os.mkdir(os.path.dirname(int_path))
    if revision:
      rev_id = remote_srv.get_rev_id(int(revision))
      print '''  Checkout to revno %s'''%revision
      remote_srv.create_checkout(int_path, revision_id=rev_id)
    else:
      print '''  Checkout to revno %s'''%remote_srv.revno()
      remote_srv.create_checkout(int_path)
  
  if os.path.basename(int_path) == 'web-client':
    print '''  Webclient: updating init file'''
    lines = open('%s/scripts/openerp-web'%int_path,'r').readlines()
    out = ''
    for line in lines:
      if 'NAME=openerp-web' in line:
        out += line.replace('NAME=openerp-web','NAME=openerp-web-integration')
      elif 'CONFIGFILE="/etc/openerp-web.cfg' in line:
        out += line.replace('CONFIGFILE="/etc/openerp-web.cfg"','CONFIGFILE="/etc/openerp-web-integration.cfg"')
      else:
        out += line
    file = open('%s/scripts/openerp-web'%int_path,'w+')
    file.write(out)
    file.close()
#    print '''  Webclient: installing libs'''
#    cmd = '''cd %s/lib &&  sh populate.sh''' % (int_path,)
#    subprocess.Popen(cmd.split(), stdout=devnull)
#    time.sleep(10)

  if os.path.basename(int_path) == 'server':
    linkAddons(int_path,prod_path)
  
  if not revision:
    rev_num = remote_srv.revno()
    return remote_srv.get_rev_id(int(rev_num))
  return revision

if os.path.exists(_config_file):
  print '''Config file %s found...''' % _config_file
  config = ConfigParser.ConfigParser()
  config.read(_config_file)
  srv_rev = config.get('Integration','server',0)
  add_rev = config.get('Integration','addons',0)
  ade_rev = config.get('Integration','extra-addons',0)
  web_rev = config.get('Integration','web-client',0)
  sad_rev = config.get('Integration','specific-addons',0)


try:
  print '''Stopping webclient'''
  subprocess.Popen(['/etc/init.d/openerp-web-integration','stop'], stdout=devnull,stderr=devnull)
except:
  pass

try:
  print '''Stopping Instance'''                                                                                                                                                                                      
  subprocess.call(['/srv/openerp/openerp-admin.py','--stop','integration'])
except:
  pass

add_rev_n = createIntegration(add_rev, '%s/addons'% _prod_path,           '%s/addons'% _inte_path,          _remote_add)
ade_rev_n = createIntegration(ade_rev, '%s/extra-addons'% _prod_path,     '%s/extra-addons'% _inte_path,    _remote_ade)
web_rev_n = createIntegration(web_rev, '%s/web-client'% _prod_path,       '%s/web-client'% _inte_path,      _remote_wcl)
sad_rev_n = createIntegration(sad_rev, '%s/specific-addons'% _prod_path,  '%s/specific-addons'% _inte_path, _remote_sad)
srv_rev_n = createIntegration(srv_rev, '%s/server'% _prod_path,           '%s/server'% _inte_path,          _remote_srv)

print '''Creating config file...'''
config = ConfigParser.ConfigParser()
config.add_section('Integration')
config.set('Integration','addons',add_rev_n)
config.set('Integration','extra-addons',ade_rev_n)
config.set('Integration','web-client',web_rev_n)
config.set('Integration','server',srv_rev_n)
config.set('Integration','specific-addons',sad_rev_n)
configfile = open(_config_file,'w+')
config.write(configfile)
configfile.close()

print '''Setting Integration Instance on boot...'''
config = ConfigParser.ConfigParser()
config.read('%s/../instance.ini' % _inte_path)
for item in config.items('Main'):
  if item[0] == 'startonboot':
    config.set('Main','startonboot','1')
  else:
    config.set('Main',item[0],item[1])
file = open('%s/../instance.ini' % _inte_path, 'w')
config.write(file)
file.close()

os.setegid(0)
os.seteuid(0)

_postgres = grp.getgrnam('postgres')
os.setegid(_postgres.gr_gid)
os.seteuid(getpwnam('postgres')[2])

print '''Dropping database...'''
subprocess.Popen(['dropdb','openerp_integrationc<%=openerp_project%>'], stdout=devnull, stderr=devnull)
time.sleep(5)
print '''Creating database'''
subprocess.Popen(['createdb', '-O', 'openerp_integration', '-E', 'UNICODE', 'openerp_integration<%=openerp_project%>'], stdout=devnull, stderr=devnull)
time.sleep(5)
print '''Inserting data in database...'''
pgdump = subprocess.Popen(['/usr/bin/pg_dump', '-c', '-O', '-d', '-D', 'openerp_prod<%=openerp_project%>'], stdout=subprocess.PIPE, stderr=devnull)
p = subprocess.Popen(['/usr/bin/psql', 'openerp_integration<%=openerp_project%>', '-U', 'openerp_integration'], stdin=pgdump.stdout, stderr=devnull, stdout=devnull)
p.wait()
print '''Upgrading passwords....'''
sql = subprocess.Popen(['echo','update', 'res_users', 'set', 'password','='"'int_'||password;"], stdout=subprocess.PIPE,stderr=devnull)
subprocess.Popen(['/usr/bin/psql','openerp_integration<%=openerp_project%>'], stdin=sql.stdout, stderr=devnull, stdout=devnull)

time.sleep(5)

os.setegid(0)
os.seteuid(0)
print '''Updating database for new version...'''
p = subprocess.Popen(['%s/server/bin/openerp-server.py'%_inte_path, '--db_user=openerp_integration', '--without-demo=all', '--update=base', '--database=openerp_integrationcjeanneret', '--stop-after-init', '--cache-timeout=0'],stdout=devnull,stderr=devnull)
p.wait()

print '''Starting Instance'''
subprocess.Popen(['/srv/openerp/openerp-admin.py','--start','integration'], stdout=devnull,stderr=devnull)
print '''Starting webclient'''
subprocess.Popen(['/etc/init.d/openerp-web-integration','start'], stdout=devnull,stderr=devnull)

devnull.close()
sys.exit(0)
